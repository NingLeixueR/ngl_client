// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: db.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pbdb {

  /// <summary>Holder for reflection information generated from db.proto</summary>
  public static partial class DbReflection {

    #region Descriptor
    /// <summary>File descriptor for db.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DbReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CghkYi5wcm90bxIEcGJkYiK8AQoKZGJfYWNjb3VudBIRCgRtX2lkGAEgASgD",
            "SACIAQESFQoIbV9yb2xlaWQYAiABKANIAYgBARIWCgltX2FjY291bnQYAyAB",
            "KAlIAogBARIYCgttX3Bhc3N3b3JsZBgEIAEoCUgDiAEBEhMKBm1fYXJlYRgF",
            "IAEoBUgEiAEBQgcKBV9tX2lkQgsKCV9tX3JvbGVpZEIMCgpfbV9hY2NvdW50",
            "Qg4KDF9tX3Bhc3N3b3JsZEIJCgdfbV9hcmVhIoICCghkYl9icmllZhIRCgRt",
            "X2lkGAEgASgDSACIAQESEwoGbV9uYW1lGAIgASgJSAGIAQESEQoEbV9sdhgD",
            "IAEoBUgCiAEBEhgKC21fbW9uZXlnb2xkGAQgASgFSAOIAQESGgoNbV9tb25l",
            "eXNpbHZlchgFIAEoBUgEiAEBEhIKBW1fdmlwGAYgASgFSAWIAQESGAoLbV9u",
            "b3RhbGt1dGMYByABKAVIBogBAUIHCgVfbV9pZEIJCgdfbV9uYW1lQgcKBV9t",
            "X2x2Qg4KDF9tX21vbmV5Z29sZEIQCg5fbV9tb25leXNpbHZlckIICgZfbV92",
            "aXBCDgoMX21fbm90YWxrdXRjItcBCgdkYl9yb2xlEhEKBG1faWQYASABKANI",
            "AIgBARIjCgZtX2Jhc2UYAiABKAsyDi5wYmRiLmRiX2JyaWVmSAGIAQESKgoK",
            "bV9yZWNoYXJnZRgDIAMoCzIWLnBiZGIuZGJfcm9sZS5yZWNoYXJnZRpUCghy",
            "ZWNoYXJnZRIZCgxtX3JlY2hhcmdlaWQYASABKAVIAIgBARISCgVtX3V0YxgC",
            "IAEoBUgBiAEBQg8KDV9tX3JlY2hhcmdlaWRCCAoGX21fdXRjQgcKBV9tX2lk",
            "QgkKB19tX2Jhc2UingEKBGl0ZW0SEQoEbV9pZBgBIAEoBUgAiAEBEhIKBW1f",
            "dGlkGAIgASgFSAGIAQESFAoHbV9jb3VudBgDIAEoBUgCiAEBEhEKBG1fbHYY",
            "BCABKAVIA4gBARITCgZtX3N0YXIYBSABKAVIBIgBAUIHCgVfbV9pZEIICgZf",
            "bV90aWRCCgoIX21fY291bnRCBwoFX21fbHZCCQoHX21fc3RhciKsAQoGZGJf",
            "YmFnEhEKBG1faWQYASABKANIAIgBARIpCgdtX2l0ZW1zGAIgAygLMhgucGJk",
            "Yi5kYl9iYWcuTUl0ZW1zRW50cnkSFAoHbV9tYXhpZBgDIAEoBUgBiAEBGjkK",
            "C01JdGVtc0VudHJ5EgsKA2tleRgBIAEoBRIZCgV2YWx1ZRgCIAEoCzIKLnBi",
            "ZGIuaXRlbToCOAFCBwoFX21faWRCCgoIX21fbWF4aWQibQoLZGJfa2V5dmFs",
            "dWUSEQoEbV9pZBgBIAEoA0gAiAEBEhQKB21fdmFsdWUYAiABKAlIAYgBASIg",
            "CgNla3YSCAoEbm9uZRAAEg8KC2FjY291bnRfYmFuEAFCBwoFX21faWRCCgoI",
            "X21fdmFsdWUijQEKD2RiX3JvbGVrZXl2YWx1ZRIRCgRtX2lkGAEgASgDSACI",
            "AQESMAoGbV9kYXRhGAIgAygLMiAucGJkYi5kYl9yb2xla2V5dmFsdWUuTURh",
            "dGFFbnRyeRosCgpNRGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAFCBwoFX21faWQiUgoIbWFpbGl0ZW0SFgoJbV9pdGVtdGlkGAEg",
            "ASgFSACIAQESFAoHbV9jb3VudBgCIAEoBUgBiAEBQgwKCl9tX2l0ZW10aWRC",
            "CgoIX21fY291bnQikwIKBG1haWwSEQoEbV9pZBgBIAEoBUgAiAEBEhgKC21f",
            "Y3JlYXRldXRjGAIgASgFSAGIAQESEgoFbV90aWQYAyABKAVIAogBARIUCgdt",
            "X3ByYW1zGAQgASgJSAOIAQESFgoJbV9jb250ZW50GAUgASgJSASIAQESHwoH",
            "bV9pdGVtcxgGIAMoCzIOLnBiZGIubWFpbGl0ZW0SEwoGbV9yZWFkGAcgASgI",
            "SAWIAQESEwoGbV9kcmF3GAggASgISAaIAQFCBwoFX21faWRCDgoMX21fY3Jl",
            "YXRldXRjQggKBl9tX3RpZEIKCghfbV9wcmFtc0IMCgpfbV9jb250ZW50QgkK",
            "B19tX3JlYWRCCQoHX21fZHJhdyKJAQoHZGJfbWFpbBIRCgRtX2lkGAEgASgD",
            "SACIAQESKAoGbV9tYWlsGAIgAygLMhgucGJkYi5kYl9tYWlsLk1NYWlsRW50",
            "cnkaOAoKTU1haWxFbnRyeRILCgNrZXkYASABKAUSGQoFdmFsdWUYAiABKAsy",
            "Ci5wYmRiLm1haWw6AjgBQgcKBV9tX2lkIn8KCGRiX2d1aWxkEhEKBG1faWQY",
            "ASABKANIAIgBARIUCgdtX2d1aWxkGAIgASgJSAGIAQESFQoIbV9sZWFkZXIY",
            "AyABKANIAogBARIRCgltX21lbWJlcnMYBCADKANCBwoFX21faWRCCgoIX21f",
            "Z3VpbGRCCwoJX21fbGVhZGVyIqEBCglkYl9ub3RpY2USEQoEbV9pZBgBIAEo",
            "A0gAiAEBEhUKCG1fbm90aWNlGAIgASgJSAGIAQESGAoLbV9zdGFydHRpbWUY",
            "AyABKAVIAogBARIZCgxtX2ZpbmlzaHRpbWUYBCABKAVIA4gBAUIHCgVfbV9p",
            "ZEILCglfbV9ub3RpY2VCDgoMX21fc3RhcnR0aW1lQg8KDV9tX2ZpbmlzaHRp",
            "bWUiTAoIcmFua2l0ZW0SFAoHbV92YWx1ZRgBIAEoA0gAiAEBEhMKBm1fdGlt",
            "ZRgCIAEoBUgBiAEBQgoKCF9tX3ZhbHVlQgkKB19tX3RpbWUimAEKC2RiX3Jh",
            "bmtsaXN0EhEKBG1faWQYASABKANIAIgBARIuCgdtX2l0ZW1zGAIgAygLMh0u",
            "cGJkYi5kYl9yYW5rbGlzdC5NSXRlbXNFbnRyeRo9CgtNSXRlbXNFbnRyeRIL",
            "CgNrZXkYASABKAUSHQoFdmFsdWUYAiABKAsyDi5wYmRiLnJhbmtpdGVtOgI4",
            "AUIHCgVfbV9pZCKZBAoLZGJfYWN0aXZpdHkSEQoEbV9pZBgBIAEoA0gAiAEB",
            "EhIKBW1fYmVnGAIgASgFSAGIAQESEgoFbV9lbmQYAyABKAVIAogBARIUCgdt",
            "X3N0YXJ0GAQgASgISAOIAQESFQoIbV9maW5pc2gYBSABKAhIBIgBARIZCgxt",
            "X2NhbGVuZGFyaWQYBiABKAVIBYgBARJAChBtX2RyYXdjb21wbGlhbmNlGAcg",
            "AygLMiYucGJkYi5kYl9hY3Rpdml0eS5NRHJhd2NvbXBsaWFuY2VFbnRyeRqj",
            "AQoOZHJhd2NvbXBsaWFuY2USFAoHbV9jb3VudBgBIAEoBUgAiAEBEj8KCG1f",
            "cmV3YXJkGAIgAygLMi0ucGJkYi5kYl9hY3Rpdml0eS5kcmF3Y29tcGxpYW5j",
            "ZS5NUmV3YXJkRW50cnkaLgoMTVJld2FyZEVudHJ5EgsKA2tleRgBIAEoBRIN",
            "CgV2YWx1ZRgCIAEoCDoCOAFCCgoIX21fY291bnQaWAoUTURyYXdjb21wbGlh",
            "bmNlRW50cnkSCwoDa2V5GAEgASgDEi8KBXZhbHVlGAIgASgLMiAucGJkYi5k",
            "Yl9hY3Rpdml0eS5kcmF3Y29tcGxpYW5jZToCOAFCBwoFX21faWRCCAoGX21f",
            "YmVnQggKBl9tX2VuZEIKCghfbV9zdGFydEILCglfbV9maW5pc2hCDwoNX21f",
            "Y2FsZW5kYXJpZCL3BAoHZGJfdGFzaxIRCgRtX2lkGAEgASgDSACIAQESMAoK",
            "bV9ydW5kYXRhcxgCIAMoCzIcLnBiZGIuZGJfdGFzay5NUnVuZGF0YXNFbnRy",
            "eRI8ChBtX2NvbXBsZXRlZGRhdGFzGAMgAygLMiIucGJkYi5kYl90YXNrLk1D",
            "b21wbGV0ZWRkYXRhc0VudHJ5GnUKDWRhdGFfc2NoZWR1bGUSEwoGbV90eXBl",
            "GAEgASgFSACIAQESFAoHbV92YWx1ZRgCIAEoBUgBiAEBEhUKCG1fc3VtaW50",
            "GAMgASgFSAKIAQFCCQoHX21fdHlwZUIKCghfbV92YWx1ZUILCglfbV9zdW1p",
            "bnQa1gEKBGRhdGESFQoIbV90YXNraWQYASABKAVIAIgBARIZCgxtX3JlY2Vp",
            "dmV1dGMYAiABKAVIAYgBARIXCgptX2ZpbnNodXRjGAMgASgFSAKIAQESMAoL",
            "bV9zY2hlZHVsZXMYBCADKAsyGy5wYmRiLmRiX3Rhc2suZGF0YV9zY2hlZHVs",
            "ZRIWCgltX3JlY2VpdmUYBSABKAhIA4gBAUILCglfbV90YXNraWRCDwoNX21f",
            "cmVjZWl2ZXV0Y0INCgtfbV9maW5zaHV0Y0IMCgpfbV9yZWNlaXZlGkQKDk1S",
            "dW5kYXRhc0VudHJ5EgsKA2tleRgBIAEoBRIhCgV2YWx1ZRgCIAEoCzISLnBi",
            "ZGIuZGJfdGFzay5kYXRhOgI4ARpKChRNQ29tcGxldGVkZGF0YXNFbnRyeRIL",
            "CgNrZXkYASABKAUSIQoFdmFsdWUYAiABKAsyEi5wYmRiLmRiX3Rhc2suZGF0",
            "YToCOAFCBwoFX21faWQijwEKC2RiX2NhbGVuZGFyEhEKBG1faWQYASABKANI",
            "AIgBARITCgZtX3RpbWUYAiABKANIAYgBARIUCgdtX3N0YXJ0GAMgASgISAKI",
            "AQESFQoIbV9maW5pc2gYBCABKAhIA4gBAUIHCgVfbV9pZEIJCgdfbV90aW1l",
            "QgoKCF9tX3N0YXJ0QgsKCV9tX2ZpbmlzaCL7AQoIZmFtaWx5ZXISFQoIbV9y",
            "b2xlaWQYASABKANIAIgBARIWCgltX2pvaW51dGMYAiABKAVIAYgBARIaCg1t",
            "X2xhc3RzaWdudXRjGAMgASgFSAKIAQESMQoKbV9wb3NpdGlvbhgEIAEoDjIY",
            "LnBiZGIuZmFtaWx5ZXIuZXBvc2l0aW9uSAOIAQEiNQoJZXBvc2l0aW9uEgoK",
            "BmxlYWRlchAAEg4KCmNvdW5zZWxsb3IQARIMCghvcmRpbmFyeRACQgsKCV9t",
            "X3JvbGVpZEIMCgpfbV9qb2ludXRjQhAKDl9tX2xhc3RzaWdudXRjQg0KC19t",
            "X3Bvc2l0aW9uIr8CCglkYl9mYW1pbHkSEQoEbV9pZBgBIAEoA0gAiAEBEhgK",
            "C21fY3JlYXRldXRjGAIgASgFSAGIAQESEwoGbV9uYW1lGAMgASgJSAKIAQES",
            "FQoIbV9sZWFkZXIYBCABKANIA4gBARIRCgRtX2x2GAUgASgFSASIAQESEgoF",
            "bV9leHAYBiABKAVIBYgBARIuCghtX21lbWJlchgHIAMoCzIcLnBiZGIuZGJf",
            "ZmFtaWx5Lk1NZW1iZXJFbnRyeRo+CgxNTWVtYmVyRW50cnkSCwoDa2V5GAEg",
            "ASgDEh0KBXZhbHVlGAIgASgLMg4ucGJkYi5mYW1pbHllcjoCOAFCBwoFX21f",
            "aWRCDgoMX21fY3JlYXRldXRjQgkKB19tX25hbWVCCwoJX21fbGVhZGVyQgcK",
            "BV9tX2x2QggKBl9tX2V4cCq4AgoHRU5VTV9EQhITCg9FTlVNX0RCX0FDQ09V",
            "TlQQABIQCgxFTlVNX0RCX1JPTEUQARIRCg1FTlVNX0RCX0JSSUVGEAISDwoL",
            "RU5VTV9EQl9CQUcQAxIUChBFTlVNX0RCX0tFWVZBTFVFEAQSEAoMRU5VTV9E",
            "Ql9NQUlMEAUSEQoNRU5VTV9EQl9HVUlMRBAGEhIKDkVOVU1fREJfTk9USUNF",
            "EAcSFAoQRU5VTV9EQl9SQU5LTElTVBAIEhQKEEVOVU1fREJfQUNUSVZJVFkQ",
            "CRIQCgxFTlVNX0RCX1RBU0sQChIUChBFTlVNX0RCX0NBTEVOREFSEAsSGAoU",
            "RU5VTV9EQl9ST0xFS0VZVkFMVUUQDBISCg5FTlVNX0RCX0ZBTUlMWRANEhEK",
            "DUVOVU1fREJfQ09VTlQQDioeCgllcmFua2xpc3QSBgoCbHYQABIJCgVjb3Vu",
            "dBABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pbdb.ENUM_DB), typeof(global::Pbdb.eranklist), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_account), global::Pbdb.db_account.Parser, new[]{ "MId", "MRoleid", "MAccount", "MPassworld", "MArea" }, new[]{ "MId", "MRoleid", "MAccount", "MPassworld", "MArea" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_brief), global::Pbdb.db_brief.Parser, new[]{ "MId", "MName", "MLv", "MMoneygold", "MMoneysilver", "MVip", "MNotalkutc" }, new[]{ "MId", "MName", "MLv", "MMoneygold", "MMoneysilver", "MVip", "MNotalkutc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_role), global::Pbdb.db_role.Parser, new[]{ "MId", "MBase", "MRecharge" }, new[]{ "MId", "MBase" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_role.Types.recharge), global::Pbdb.db_role.Types.recharge.Parser, new[]{ "MRechargeid", "MUtc" }, new[]{ "MRechargeid", "MUtc" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.item), global::Pbdb.item.Parser, new[]{ "MId", "MTid", "MCount", "MLv", "MStar" }, new[]{ "MId", "MTid", "MCount", "MLv", "MStar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_bag), global::Pbdb.db_bag.Parser, new[]{ "MId", "MItems", "MMaxid" }, new[]{ "MId", "MMaxid" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_keyvalue), global::Pbdb.db_keyvalue.Parser, new[]{ "MId", "MValue" }, new[]{ "MId", "MValue" }, new[]{ typeof(global::Pbdb.db_keyvalue.Types.ekv) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_rolekeyvalue), global::Pbdb.db_rolekeyvalue.Parser, new[]{ "MId", "MData" }, new[]{ "MId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.mailitem), global::Pbdb.mailitem.Parser, new[]{ "MItemtid", "MCount" }, new[]{ "MItemtid", "MCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.mail), global::Pbdb.mail.Parser, new[]{ "MId", "MCreateutc", "MTid", "MPrams", "MContent", "MItems", "MRead", "MDraw" }, new[]{ "MId", "MCreateutc", "MTid", "MPrams", "MContent", "MRead", "MDraw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_mail), global::Pbdb.db_mail.Parser, new[]{ "MId", "MMail" }, new[]{ "MId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_guild), global::Pbdb.db_guild.Parser, new[]{ "MId", "MGuild", "MLeader", "MMembers" }, new[]{ "MId", "MGuild", "MLeader" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_notice), global::Pbdb.db_notice.Parser, new[]{ "MId", "MNotice", "MStarttime", "MFinishtime" }, new[]{ "MId", "MNotice", "MStarttime", "MFinishtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.rankitem), global::Pbdb.rankitem.Parser, new[]{ "MValue", "MTime" }, new[]{ "MValue", "MTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_ranklist), global::Pbdb.db_ranklist.Parser, new[]{ "MId", "MItems" }, new[]{ "MId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_activity), global::Pbdb.db_activity.Parser, new[]{ "MId", "MBeg", "MEnd", "MStart", "MFinish", "MCalendarid", "MDrawcompliance" }, new[]{ "MId", "MBeg", "MEnd", "MStart", "MFinish", "MCalendarid" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_activity.Types.drawcompliance), global::Pbdb.db_activity.Types.drawcompliance.Parser, new[]{ "MCount", "MReward" }, new[]{ "MCount" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_task), global::Pbdb.db_task.Parser, new[]{ "MId", "MRundatas", "MCompleteddatas" }, new[]{ "MId" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_task.Types.data_schedule), global::Pbdb.db_task.Types.data_schedule.Parser, new[]{ "MType", "MValue", "MSumint" }, new[]{ "MType", "MValue", "MSumint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_task.Types.data), global::Pbdb.db_task.Types.data.Parser, new[]{ "MTaskid", "MReceiveutc", "MFinshutc", "MSchedules", "MReceive" }, new[]{ "MTaskid", "MReceiveutc", "MFinshutc", "MReceive" }, null, null, null),
            null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_calendar), global::Pbdb.db_calendar.Parser, new[]{ "MId", "MTime", "MStart", "MFinish" }, new[]{ "MId", "MTime", "MStart", "MFinish" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.familyer), global::Pbdb.familyer.Parser, new[]{ "MRoleid", "MJoinutc", "MLastsignutc", "MPosition" }, new[]{ "MRoleid", "MJoinutc", "MLastsignutc", "MPosition" }, new[]{ typeof(global::Pbdb.familyer.Types.eposition) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pbdb.db_family), global::Pbdb.db_family.Parser, new[]{ "MId", "MCreateutc", "MName", "MLeader", "MLv", "MExp", "MMember" }, new[]{ "MId", "MCreateutc", "MName", "MLeader", "MLv", "MExp" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum ENUM_DB {
    /// <summary>
    /// 账号数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_ACCOUNT")] Account = 0,
    /// <summary>
    /// 玩家数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_ROLE")] Role = 1,
    /// <summary>
    /// 玩家简要数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_BRIEF")] Brief = 2,
    /// <summary>
    /// 背包数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_BAG")] Bag = 3,
    /// <summary>
    /// 公共key/value数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_KEYVALUE")] Keyvalue = 4,
    /// <summary>
    /// 邮件数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_MAIL")] Mail = 5,
    /// <summary>
    /// 工会数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_GUILD")] Guild = 6,
    /// <summary>
    /// 公告数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_NOTICE")] Notice = 7,
    /// <summary>
    /// 排行数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_RANKLIST")] Ranklist = 8,
    /// <summary>
    /// 活动数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_ACTIVITY")] Activity = 9,
    /// <summary>
    /// 任务数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_TASK")] Task = 10,
    /// <summary>
    /// 脚本日历数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_CALENDAR")] Calendar = 11,
    /// <summary>
    /// 玩家个人key/value数据
    /// </summary>
    [pbr::OriginalName("ENUM_DB_ROLEKEYVALUE")] Rolekeyvalue = 12,
    /// <summary>
    /// 军团
    /// </summary>
    [pbr::OriginalName("ENUM_DB_FAMILY")] Family = 13,
    [pbr::OriginalName("ENUM_DB_COUNT")] Count = 14,
  }

  public enum eranklist {
    /// <summary>
    /// 等级排行
    /// </summary>
    [pbr::OriginalName("lv")] Lv = 0,
    [pbr::OriginalName("count")] Count = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ENUM_DB_ACCOUNT,				// 账号数据
  /// </summary>
  public sealed partial class db_account : pb::IMessage<db_account>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_account> _parser = new pb::MessageParser<db_account>(() => new db_account());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_account(db_account other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mRoleid_ = other.mRoleid_;
      mAccount_ = other.mAccount_;
      mPassworld_ = other.mPassworld_;
      mArea_ = other.mArea_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_account Clone() {
      return new db_account(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// 帐号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_roleid" field.</summary>
    public const int MRoleidFieldNumber = 2;
    private long mRoleid_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MRoleid {
      get { if ((_hasBits0 & 2) != 0) { return mRoleid_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        mRoleid_ = value;
      }
    }
    /// <summary>Gets whether the "m_roleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMRoleid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_roleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMRoleid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_account" field.</summary>
    public const int MAccountFieldNumber = 3;
    private string mAccount_;
    /// <summary>
    /// 账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MAccount {
      get { return mAccount_ ?? ""; }
      set {
        mAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_account" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMAccount {
      get { return mAccount_ != null; }
    }
    /// <summary>Clears the value of the "m_account" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMAccount() {
      mAccount_ = null;
    }

    /// <summary>Field number for the "m_passworld" field.</summary>
    public const int MPassworldFieldNumber = 4;
    private string mPassworld_;
    /// <summary>
    /// 密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MPassworld {
      get { return mPassworld_ ?? ""; }
      set {
        mPassworld_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_passworld" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMPassworld {
      get { return mPassworld_ != null; }
    }
    /// <summary>Clears the value of the "m_passworld" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMPassworld() {
      mPassworld_ = null;
    }

    /// <summary>Field number for the "m_area" field.</summary>
    public const int MAreaFieldNumber = 5;
    private int mArea_;
    /// <summary>
    /// 区服id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MArea {
      get { if ((_hasBits0 & 4) != 0) { return mArea_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        mArea_ = value;
      }
    }
    /// <summary>Gets whether the "m_area" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMArea {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_area" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMArea() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MRoleid != other.MRoleid) return false;
      if (MAccount != other.MAccount) return false;
      if (MPassworld != other.MPassworld) return false;
      if (MArea != other.MArea) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMRoleid) hash ^= MRoleid.GetHashCode();
      if (HasMAccount) hash ^= MAccount.GetHashCode();
      if (HasMPassworld) hash ^= MPassworld.GetHashCode();
      if (HasMArea) hash ^= MArea.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMRoleid) {
        output.WriteRawTag(16);
        output.WriteInt64(MRoleid);
      }
      if (HasMAccount) {
        output.WriteRawTag(26);
        output.WriteString(MAccount);
      }
      if (HasMPassworld) {
        output.WriteRawTag(34);
        output.WriteString(MPassworld);
      }
      if (HasMArea) {
        output.WriteRawTag(40);
        output.WriteInt32(MArea);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMRoleid) {
        output.WriteRawTag(16);
        output.WriteInt64(MRoleid);
      }
      if (HasMAccount) {
        output.WriteRawTag(26);
        output.WriteString(MAccount);
      }
      if (HasMPassworld) {
        output.WriteRawTag(34);
        output.WriteString(MPassworld);
      }
      if (HasMArea) {
        output.WriteRawTag(40);
        output.WriteInt32(MArea);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMRoleid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MRoleid);
      }
      if (HasMAccount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MAccount);
      }
      if (HasMPassworld) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MPassworld);
      }
      if (HasMArea) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MArea);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_account other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMRoleid) {
        MRoleid = other.MRoleid;
      }
      if (other.HasMAccount) {
        MAccount = other.MAccount;
      }
      if (other.HasMPassworld) {
        MPassworld = other.MPassworld;
      }
      if (other.HasMArea) {
        MArea = other.MArea;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MRoleid = input.ReadInt64();
            break;
          }
          case 26: {
            MAccount = input.ReadString();
            break;
          }
          case 34: {
            MPassworld = input.ReadString();
            break;
          }
          case 40: {
            MArea = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MRoleid = input.ReadInt64();
            break;
          }
          case 26: {
            MAccount = input.ReadString();
            break;
          }
          case 34: {
            MPassworld = input.ReadString();
            break;
          }
          case 40: {
            MArea = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ENUM_DB_BRIEF,			// 玩家简要数据
  /// </summary>
  public sealed partial class db_brief : pb::IMessage<db_brief>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_brief> _parser = new pb::MessageParser<db_brief>(() => new db_brief());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_brief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_brief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_brief(db_brief other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mName_ = other.mName_;
      mLv_ = other.mLv_;
      mMoneygold_ = other.mMoneygold_;
      mMoneysilver_ = other.mMoneysilver_;
      mVip_ = other.mVip_;
      mNotalkutc_ = other.mNotalkutc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_brief Clone() {
      return new db_brief(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// role id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_name" field.</summary>
    public const int MNameFieldNumber = 2;
    private string mName_;
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MName {
      get { return mName_ ?? ""; }
      set {
        mName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMName {
      get { return mName_ != null; }
    }
    /// <summary>Clears the value of the "m_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMName() {
      mName_ = null;
    }

    /// <summary>Field number for the "m_lv" field.</summary>
    public const int MLvFieldNumber = 3;
    private int mLv_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MLv {
      get { if ((_hasBits0 & 2) != 0) { return mLv_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mLv_ = value;
      }
    }
    /// <summary>Gets whether the "m_lv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMLv {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_lv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMLv() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_moneygold" field.</summary>
    public const int MMoneygoldFieldNumber = 4;
    private int mMoneygold_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MMoneygold {
      get { if ((_hasBits0 & 4) != 0) { return mMoneygold_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        mMoneygold_ = value;
      }
    }
    /// <summary>Gets whether the "m_moneygold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMMoneygold {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_moneygold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMMoneygold() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "m_moneysilver" field.</summary>
    public const int MMoneysilverFieldNumber = 5;
    private int mMoneysilver_;
    /// <summary>
    /// 银币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MMoneysilver {
      get { if ((_hasBits0 & 8) != 0) { return mMoneysilver_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        mMoneysilver_ = value;
      }
    }
    /// <summary>Gets whether the "m_moneysilver" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMMoneysilver {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "m_moneysilver" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMMoneysilver() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "m_vip" field.</summary>
    public const int MVipFieldNumber = 6;
    private int mVip_;
    /// <summary>
    /// vip等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MVip {
      get { if ((_hasBits0 & 16) != 0) { return mVip_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        mVip_ = value;
      }
    }
    /// <summary>Gets whether the "m_vip" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMVip {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "m_vip" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMVip() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "m_notalkutc" field.</summary>
    public const int MNotalkutcFieldNumber = 7;
    private int mNotalkutc_;
    /// <summary>
    /// 被禁言的期限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MNotalkutc {
      get { if ((_hasBits0 & 32) != 0) { return mNotalkutc_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        mNotalkutc_ = value;
      }
    }
    /// <summary>Gets whether the "m_notalkutc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMNotalkutc {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "m_notalkutc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMNotalkutc() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_brief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_brief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MName != other.MName) return false;
      if (MLv != other.MLv) return false;
      if (MMoneygold != other.MMoneygold) return false;
      if (MMoneysilver != other.MMoneysilver) return false;
      if (MVip != other.MVip) return false;
      if (MNotalkutc != other.MNotalkutc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMName) hash ^= MName.GetHashCode();
      if (HasMLv) hash ^= MLv.GetHashCode();
      if (HasMMoneygold) hash ^= MMoneygold.GetHashCode();
      if (HasMMoneysilver) hash ^= MMoneysilver.GetHashCode();
      if (HasMVip) hash ^= MVip.GetHashCode();
      if (HasMNotalkutc) hash ^= MNotalkutc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMName) {
        output.WriteRawTag(18);
        output.WriteString(MName);
      }
      if (HasMLv) {
        output.WriteRawTag(24);
        output.WriteInt32(MLv);
      }
      if (HasMMoneygold) {
        output.WriteRawTag(32);
        output.WriteInt32(MMoneygold);
      }
      if (HasMMoneysilver) {
        output.WriteRawTag(40);
        output.WriteInt32(MMoneysilver);
      }
      if (HasMVip) {
        output.WriteRawTag(48);
        output.WriteInt32(MVip);
      }
      if (HasMNotalkutc) {
        output.WriteRawTag(56);
        output.WriteInt32(MNotalkutc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMName) {
        output.WriteRawTag(18);
        output.WriteString(MName);
      }
      if (HasMLv) {
        output.WriteRawTag(24);
        output.WriteInt32(MLv);
      }
      if (HasMMoneygold) {
        output.WriteRawTag(32);
        output.WriteInt32(MMoneygold);
      }
      if (HasMMoneysilver) {
        output.WriteRawTag(40);
        output.WriteInt32(MMoneysilver);
      }
      if (HasMVip) {
        output.WriteRawTag(48);
        output.WriteInt32(MVip);
      }
      if (HasMNotalkutc) {
        output.WriteRawTag(56);
        output.WriteInt32(MNotalkutc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MName);
      }
      if (HasMLv) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MLv);
      }
      if (HasMMoneygold) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MMoneygold);
      }
      if (HasMMoneysilver) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MMoneysilver);
      }
      if (HasMVip) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MVip);
      }
      if (HasMNotalkutc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MNotalkutc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_brief other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMName) {
        MName = other.MName;
      }
      if (other.HasMLv) {
        MLv = other.MLv;
      }
      if (other.HasMMoneygold) {
        MMoneygold = other.MMoneygold;
      }
      if (other.HasMMoneysilver) {
        MMoneysilver = other.MMoneysilver;
      }
      if (other.HasMVip) {
        MVip = other.MVip;
      }
      if (other.HasMNotalkutc) {
        MNotalkutc = other.MNotalkutc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MName = input.ReadString();
            break;
          }
          case 24: {
            MLv = input.ReadInt32();
            break;
          }
          case 32: {
            MMoneygold = input.ReadInt32();
            break;
          }
          case 40: {
            MMoneysilver = input.ReadInt32();
            break;
          }
          case 48: {
            MVip = input.ReadInt32();
            break;
          }
          case 56: {
            MNotalkutc = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MName = input.ReadString();
            break;
          }
          case 24: {
            MLv = input.ReadInt32();
            break;
          }
          case 32: {
            MMoneygold = input.ReadInt32();
            break;
          }
          case 40: {
            MMoneysilver = input.ReadInt32();
            break;
          }
          case 48: {
            MVip = input.ReadInt32();
            break;
          }
          case 56: {
            MNotalkutc = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ENUM_DB_ROLE,			// 玩家数据
  /// </summary>
  public sealed partial class db_role : pb::IMessage<db_role>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_role> _parser = new pb::MessageParser<db_role>(() => new db_role());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_role> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_role() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_role(db_role other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mBase_ = other.mBase_ != null ? other.mBase_.Clone() : null;
      mRecharge_ = other.mRecharge_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_role Clone() {
      return new db_role(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// role id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_base" field.</summary>
    public const int MBaseFieldNumber = 2;
    private global::Pbdb.db_brief mBase_;
    /// <summary>
    /// 玩家基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbdb.db_brief MBase {
      get { return mBase_; }
      set {
        mBase_ = value;
      }
    }

    /// <summary>Field number for the "m_recharge" field.</summary>
    public const int MRechargeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pbdb.db_role.Types.recharge> _repeated_mRecharge_codec
        = pb::FieldCodec.ForMessage(26, global::Pbdb.db_role.Types.recharge.Parser);
    private readonly pbc::RepeatedField<global::Pbdb.db_role.Types.recharge> mRecharge_ = new pbc::RepeatedField<global::Pbdb.db_role.Types.recharge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbdb.db_role.Types.recharge> MRecharge {
      get { return mRecharge_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_role);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_role other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (!object.Equals(MBase, other.MBase)) return false;
      if(!mRecharge_.Equals(other.mRecharge_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (mBase_ != null) hash ^= MBase.GetHashCode();
      hash ^= mRecharge_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (mBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MBase);
      }
      mRecharge_.WriteTo(output, _repeated_mRecharge_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (mBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MBase);
      }
      mRecharge_.WriteTo(ref output, _repeated_mRecharge_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (mBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MBase);
      }
      size += mRecharge_.CalculateSize(_repeated_mRecharge_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_role other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.mBase_ != null) {
        if (mBase_ == null) {
          MBase = new global::Pbdb.db_brief();
        }
        MBase.MergeFrom(other.MBase);
      }
      mRecharge_.Add(other.mRecharge_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            if (mBase_ == null) {
              MBase = new global::Pbdb.db_brief();
            }
            input.ReadMessage(MBase);
            break;
          }
          case 26: {
            mRecharge_.AddEntriesFrom(input, _repeated_mRecharge_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            if (mBase_ == null) {
              MBase = new global::Pbdb.db_brief();
            }
            input.ReadMessage(MBase);
            break;
          }
          case 26: {
            mRecharge_.AddEntriesFrom(ref input, _repeated_mRecharge_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the db_role message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 充值信息
      /// </summary>
      public sealed partial class recharge : pb::IMessage<recharge>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<recharge> _parser = new pb::MessageParser<recharge>(() => new recharge());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<recharge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pbdb.db_role.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public recharge() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public recharge(recharge other) : this() {
          _hasBits0 = other._hasBits0;
          mRechargeid_ = other.mRechargeid_;
          mUtc_ = other.mUtc_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public recharge Clone() {
          return new recharge(this);
        }

        /// <summary>Field number for the "m_rechargeid" field.</summary>
        public const int MRechargeidFieldNumber = 1;
        private int mRechargeid_;
        /// <summary>
        /// 充值id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MRechargeid {
          get { if ((_hasBits0 & 1) != 0) { return mRechargeid_; } else { return 0; } }
          set {
            _hasBits0 |= 1;
            mRechargeid_ = value;
          }
        }
        /// <summary>Gets whether the "m_rechargeid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMRechargeid {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "m_rechargeid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMRechargeid() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "m_utc" field.</summary>
        public const int MUtcFieldNumber = 2;
        private int mUtc_;
        /// <summary>
        /// 充值时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MUtc {
          get { if ((_hasBits0 & 2) != 0) { return mUtc_; } else { return 0; } }
          set {
            _hasBits0 |= 2;
            mUtc_ = value;
          }
        }
        /// <summary>Gets whether the "m_utc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMUtc {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "m_utc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMUtc() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as recharge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(recharge other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MRechargeid != other.MRechargeid) return false;
          if (MUtc != other.MUtc) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMRechargeid) hash ^= MRechargeid.GetHashCode();
          if (HasMUtc) hash ^= MUtc.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMRechargeid) {
            output.WriteRawTag(8);
            output.WriteInt32(MRechargeid);
          }
          if (HasMUtc) {
            output.WriteRawTag(16);
            output.WriteInt32(MUtc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMRechargeid) {
            output.WriteRawTag(8);
            output.WriteInt32(MRechargeid);
          }
          if (HasMUtc) {
            output.WriteRawTag(16);
            output.WriteInt32(MUtc);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMRechargeid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MRechargeid);
          }
          if (HasMUtc) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MUtc);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(recharge other) {
          if (other == null) {
            return;
          }
          if (other.HasMRechargeid) {
            MRechargeid = other.MRechargeid;
          }
          if (other.HasMUtc) {
            MUtc = other.MUtc;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MRechargeid = input.ReadInt32();
                break;
              }
              case 16: {
                MUtc = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MRechargeid = input.ReadInt32();
                break;
              }
              case 16: {
                MUtc = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  ///ENUM_DB_BAG,			// 背包数据
  /// </summary>
  public sealed partial class item : pb::IMessage<item>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<item> _parser = new pb::MessageParser<item>(() => new item());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public item(item other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mTid_ = other.mTid_;
      mCount_ = other.mCount_;
      mLv_ = other.mLv_;
      mStar_ = other.mStar_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public item Clone() {
      return new item(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private int mId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_tid" field.</summary>
    public const int MTidFieldNumber = 2;
    private int mTid_;
    /// <summary>
    /// tab id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MTid {
      get { if ((_hasBits0 & 2) != 0) { return mTid_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mTid_ = value;
      }
    }
    /// <summary>Gets whether the "m_tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMTid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMTid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_count" field.</summary>
    public const int MCountFieldNumber = 3;
    private int mCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCount {
      get { if ((_hasBits0 & 4) != 0) { return mCount_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        mCount_ = value;
      }
    }
    /// <summary>Gets whether the "m_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMCount() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "m_lv" field.</summary>
    public const int MLvFieldNumber = 4;
    private int mLv_;
    /// <summary>
    /// ## 卡牌 装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MLv {
      get { if ((_hasBits0 & 8) != 0) { return mLv_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        mLv_ = value;
      }
    }
    /// <summary>Gets whether the "m_lv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMLv {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "m_lv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMLv() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "m_star" field.</summary>
    public const int MStarFieldNumber = 5;
    private int mStar_;
    /// <summary>
    /// 星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MStar {
      get { if ((_hasBits0 & 16) != 0) { return mStar_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        mStar_ = value;
      }
    }
    /// <summary>Gets whether the "m_star" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMStar {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "m_star" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMStar() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MTid != other.MTid) return false;
      if (MCount != other.MCount) return false;
      if (MLv != other.MLv) return false;
      if (MStar != other.MStar) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMTid) hash ^= MTid.GetHashCode();
      if (HasMCount) hash ^= MCount.GetHashCode();
      if (HasMLv) hash ^= MLv.GetHashCode();
      if (HasMStar) hash ^= MStar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt32(MId);
      }
      if (HasMTid) {
        output.WriteRawTag(16);
        output.WriteInt32(MTid);
      }
      if (HasMCount) {
        output.WriteRawTag(24);
        output.WriteInt32(MCount);
      }
      if (HasMLv) {
        output.WriteRawTag(32);
        output.WriteInt32(MLv);
      }
      if (HasMStar) {
        output.WriteRawTag(40);
        output.WriteInt32(MStar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt32(MId);
      }
      if (HasMTid) {
        output.WriteRawTag(16);
        output.WriteInt32(MTid);
      }
      if (HasMCount) {
        output.WriteRawTag(24);
        output.WriteInt32(MCount);
      }
      if (HasMLv) {
        output.WriteRawTag(32);
        output.WriteInt32(MLv);
      }
      if (HasMStar) {
        output.WriteRawTag(40);
        output.WriteInt32(MStar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MId);
      }
      if (HasMTid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTid);
      }
      if (HasMCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCount);
      }
      if (HasMLv) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MLv);
      }
      if (HasMStar) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MStar);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(item other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMTid) {
        MTid = other.MTid;
      }
      if (other.HasMCount) {
        MCount = other.MCount;
      }
      if (other.HasMLv) {
        MLv = other.MLv;
      }
      if (other.HasMStar) {
        MStar = other.MStar;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt32();
            break;
          }
          case 16: {
            MTid = input.ReadInt32();
            break;
          }
          case 24: {
            MCount = input.ReadInt32();
            break;
          }
          case 32: {
            MLv = input.ReadInt32();
            break;
          }
          case 40: {
            MStar = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt32();
            break;
          }
          case 16: {
            MTid = input.ReadInt32();
            break;
          }
          case 24: {
            MCount = input.ReadInt32();
            break;
          }
          case 32: {
            MLv = input.ReadInt32();
            break;
          }
          case 40: {
            MStar = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class db_bag : pb::IMessage<db_bag>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_bag> _parser = new pb::MessageParser<db_bag>(() => new db_bag());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_bag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_bag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_bag(db_bag other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mItems_ = other.mItems_.Clone();
      mMaxid_ = other.mMaxid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_bag Clone() {
      return new db_bag(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// roleid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_items" field.</summary>
    public const int MItemsFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Pbdb.item>.Codec _map_mItems_codec
        = new pbc::MapField<int, global::Pbdb.item>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Pbdb.item.Parser), 18);
    private readonly pbc::MapField<int, global::Pbdb.item> mItems_ = new pbc::MapField<int, global::Pbdb.item>();
    /// <summary>
    /// key item id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Pbdb.item> MItems {
      get { return mItems_; }
    }

    /// <summary>Field number for the "m_maxid" field.</summary>
    public const int MMaxidFieldNumber = 3;
    private int mMaxid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MMaxid {
      get { if ((_hasBits0 & 2) != 0) { return mMaxid_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mMaxid_ = value;
      }
    }
    /// <summary>Gets whether the "m_maxid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMMaxid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_maxid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMMaxid() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_bag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_bag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (!MItems.Equals(other.MItems)) return false;
      if (MMaxid != other.MMaxid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      hash ^= MItems.GetHashCode();
      if (HasMMaxid) hash ^= MMaxid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mItems_.WriteTo(output, _map_mItems_codec);
      if (HasMMaxid) {
        output.WriteRawTag(24);
        output.WriteInt32(MMaxid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mItems_.WriteTo(ref output, _map_mItems_codec);
      if (HasMMaxid) {
        output.WriteRawTag(24);
        output.WriteInt32(MMaxid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      size += mItems_.CalculateSize(_map_mItems_codec);
      if (HasMMaxid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MMaxid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_bag other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      mItems_.Add(other.mItems_);
      if (other.HasMMaxid) {
        MMaxid = other.MMaxid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mItems_.AddEntriesFrom(input, _map_mItems_codec);
            break;
          }
          case 24: {
            MMaxid = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mItems_.AddEntriesFrom(ref input, _map_mItems_codec);
            break;
          }
          case 24: {
            MMaxid = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ENUM_DB_KEYVALUE,		// 公共key/value数据
  /// </summary>
  public sealed partial class db_keyvalue : pb::IMessage<db_keyvalue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_keyvalue> _parser = new pb::MessageParser<db_keyvalue>(() => new db_keyvalue());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_keyvalue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_keyvalue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_keyvalue(db_keyvalue other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mValue_ = other.mValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_keyvalue Clone() {
      return new db_keyvalue(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// ekeyvalue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_value" field.</summary>
    public const int MValueFieldNumber = 2;
    private string mValue_;
    /// <summary>
    /// value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MValue {
      get { return mValue_ ?? ""; }
      set {
        mValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMValue {
      get { return mValue_ != null; }
    }
    /// <summary>Clears the value of the "m_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMValue() {
      mValue_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_keyvalue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_keyvalue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MValue != other.MValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMValue) hash ^= MValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMValue) {
        output.WriteRawTag(18);
        output.WriteString(MValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMValue) {
        output.WriteRawTag(18);
        output.WriteString(MValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_keyvalue other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMValue) {
        MValue = other.MValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MValue = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MValue = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the db_keyvalue message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ekv {
        [pbr::OriginalName("none")] None = 0,
        /// <summary>
        /// 封号列表
        /// </summary>
        [pbr::OriginalName("account_ban")] AccountBan = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///ENUM_DB_ROLEKEYVALUE,		// 玩家个人key/value数据
  /// </summary>
  public sealed partial class db_rolekeyvalue : pb::IMessage<db_rolekeyvalue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_rolekeyvalue> _parser = new pb::MessageParser<db_rolekeyvalue>(() => new db_rolekeyvalue());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_rolekeyvalue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_rolekeyvalue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_rolekeyvalue(db_rolekeyvalue other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mData_ = other.mData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_rolekeyvalue Clone() {
      return new db_rolekeyvalue(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_data" field.</summary>
    public const int MDataFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_mData_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> mData_ = new pbc::MapField<string, string>();
    /// <summary>
    /// key/val
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> MData {
      get { return mData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_rolekeyvalue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_rolekeyvalue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (!MData.Equals(other.MData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      hash ^= MData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mData_.WriteTo(output, _map_mData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mData_.WriteTo(ref output, _map_mData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      size += mData_.CalculateSize(_map_mData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_rolekeyvalue other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      mData_.Add(other.mData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mData_.AddEntriesFrom(input, _map_mData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mData_.AddEntriesFrom(ref input, _map_mData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ENUM_DB_MAIL,			// 邮件数据
  /// </summary>
  public sealed partial class mailitem : pb::IMessage<mailitem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<mailitem> _parser = new pb::MessageParser<mailitem>(() => new mailitem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<mailitem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public mailitem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public mailitem(mailitem other) : this() {
      _hasBits0 = other._hasBits0;
      mItemtid_ = other.mItemtid_;
      mCount_ = other.mCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public mailitem Clone() {
      return new mailitem(this);
    }

    /// <summary>Field number for the "m_itemtid" field.</summary>
    public const int MItemtidFieldNumber = 1;
    private int mItemtid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MItemtid {
      get { if ((_hasBits0 & 1) != 0) { return mItemtid_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        mItemtid_ = value;
      }
    }
    /// <summary>Gets whether the "m_itemtid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMItemtid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_itemtid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMItemtid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_count" field.</summary>
    public const int MCountFieldNumber = 2;
    private int mCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCount {
      get { if ((_hasBits0 & 2) != 0) { return mCount_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mCount_ = value;
      }
    }
    /// <summary>Gets whether the "m_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as mailitem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(mailitem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MItemtid != other.MItemtid) return false;
      if (MCount != other.MCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMItemtid) hash ^= MItemtid.GetHashCode();
      if (HasMCount) hash ^= MCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMItemtid) {
        output.WriteRawTag(8);
        output.WriteInt32(MItemtid);
      }
      if (HasMCount) {
        output.WriteRawTag(16);
        output.WriteInt32(MCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMItemtid) {
        output.WriteRawTag(8);
        output.WriteInt32(MItemtid);
      }
      if (HasMCount) {
        output.WriteRawTag(16);
        output.WriteInt32(MCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMItemtid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MItemtid);
      }
      if (HasMCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(mailitem other) {
      if (other == null) {
        return;
      }
      if (other.HasMItemtid) {
        MItemtid = other.MItemtid;
      }
      if (other.HasMCount) {
        MCount = other.MCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MItemtid = input.ReadInt32();
            break;
          }
          case 16: {
            MCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MItemtid = input.ReadInt32();
            break;
          }
          case 16: {
            MCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class mail : pb::IMessage<mail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<mail> _parser = new pb::MessageParser<mail>(() => new mail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<mail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public mail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public mail(mail other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mCreateutc_ = other.mCreateutc_;
      mTid_ = other.mTid_;
      mPrams_ = other.mPrams_;
      mContent_ = other.mContent_;
      mItems_ = other.mItems_.Clone();
      mRead_ = other.mRead_;
      mDraw_ = other.mDraw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public mail Clone() {
      return new mail(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private int mId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_createutc" field.</summary>
    public const int MCreateutcFieldNumber = 2;
    private int mCreateutc_;
    /// <summary>
    /// 创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCreateutc {
      get { if ((_hasBits0 & 2) != 0) { return mCreateutc_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mCreateutc_ = value;
      }
    }
    /// <summary>Gets whether the "m_createutc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMCreateutc {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_createutc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMCreateutc() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_tid" field.</summary>
    public const int MTidFieldNumber = 3;
    private int mTid_;
    /// <summary>
    ///// [邮件内容] 1.邮件表id关联参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MTid {
      get { if ((_hasBits0 & 4) != 0) { return mTid_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        mTid_ = value;
      }
    }
    /// <summary>Gets whether the "m_tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMTid {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMTid() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "m_prams" field.</summary>
    public const int MPramsFieldNumber = 4;
    private string mPrams_;
    /// <summary>
    /// 参数以#号分割pram1#pram2..
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MPrams {
      get { return mPrams_ ?? ""; }
      set {
        mPrams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_prams" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMPrams {
      get { return mPrams_ != null; }
    }
    /// <summary>Clears the value of the "m_prams" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMPrams() {
      mPrams_ = null;
    }

    /// <summary>Field number for the "m_content" field.</summary>
    public const int MContentFieldNumber = 5;
    private string mContent_;
    /// <summary>
    ///// [邮件内容] 2.字符串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MContent {
      get { return mContent_ ?? ""; }
      set {
        mContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMContent {
      get { return mContent_ != null; }
    }
    /// <summary>Clears the value of the "m_content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMContent() {
      mContent_ = null;
    }

    /// <summary>Field number for the "m_items" field.</summary>
    public const int MItemsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pbdb.mailitem> _repeated_mItems_codec
        = pb::FieldCodec.ForMessage(50, global::Pbdb.mailitem.Parser);
    private readonly pbc::RepeatedField<global::Pbdb.mailitem> mItems_ = new pbc::RepeatedField<global::Pbdb.mailitem>();
    /// <summary>
    /// 邮件附件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pbdb.mailitem> MItems {
      get { return mItems_; }
    }

    /// <summary>Field number for the "m_read" field.</summary>
    public const int MReadFieldNumber = 7;
    private bool mRead_;
    /// <summary>
    /// 是否已读
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MRead {
      get { if ((_hasBits0 & 8) != 0) { return mRead_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        mRead_ = value;
      }
    }
    /// <summary>Gets whether the "m_read" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMRead {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "m_read" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMRead() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "m_draw" field.</summary>
    public const int MDrawFieldNumber = 8;
    private bool mDraw_;
    /// <summary>
    /// 是否领取附件	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MDraw {
      get { if ((_hasBits0 & 16) != 0) { return mDraw_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        mDraw_ = value;
      }
    }
    /// <summary>Gets whether the "m_draw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMDraw {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "m_draw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMDraw() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as mail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(mail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MCreateutc != other.MCreateutc) return false;
      if (MTid != other.MTid) return false;
      if (MPrams != other.MPrams) return false;
      if (MContent != other.MContent) return false;
      if(!mItems_.Equals(other.mItems_)) return false;
      if (MRead != other.MRead) return false;
      if (MDraw != other.MDraw) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMCreateutc) hash ^= MCreateutc.GetHashCode();
      if (HasMTid) hash ^= MTid.GetHashCode();
      if (HasMPrams) hash ^= MPrams.GetHashCode();
      if (HasMContent) hash ^= MContent.GetHashCode();
      hash ^= mItems_.GetHashCode();
      if (HasMRead) hash ^= MRead.GetHashCode();
      if (HasMDraw) hash ^= MDraw.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt32(MId);
      }
      if (HasMCreateutc) {
        output.WriteRawTag(16);
        output.WriteInt32(MCreateutc);
      }
      if (HasMTid) {
        output.WriteRawTag(24);
        output.WriteInt32(MTid);
      }
      if (HasMPrams) {
        output.WriteRawTag(34);
        output.WriteString(MPrams);
      }
      if (HasMContent) {
        output.WriteRawTag(42);
        output.WriteString(MContent);
      }
      mItems_.WriteTo(output, _repeated_mItems_codec);
      if (HasMRead) {
        output.WriteRawTag(56);
        output.WriteBool(MRead);
      }
      if (HasMDraw) {
        output.WriteRawTag(64);
        output.WriteBool(MDraw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt32(MId);
      }
      if (HasMCreateutc) {
        output.WriteRawTag(16);
        output.WriteInt32(MCreateutc);
      }
      if (HasMTid) {
        output.WriteRawTag(24);
        output.WriteInt32(MTid);
      }
      if (HasMPrams) {
        output.WriteRawTag(34);
        output.WriteString(MPrams);
      }
      if (HasMContent) {
        output.WriteRawTag(42);
        output.WriteString(MContent);
      }
      mItems_.WriteTo(ref output, _repeated_mItems_codec);
      if (HasMRead) {
        output.WriteRawTag(56);
        output.WriteBool(MRead);
      }
      if (HasMDraw) {
        output.WriteRawTag(64);
        output.WriteBool(MDraw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MId);
      }
      if (HasMCreateutc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCreateutc);
      }
      if (HasMTid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTid);
      }
      if (HasMPrams) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MPrams);
      }
      if (HasMContent) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MContent);
      }
      size += mItems_.CalculateSize(_repeated_mItems_codec);
      if (HasMRead) {
        size += 1 + 1;
      }
      if (HasMDraw) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(mail other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMCreateutc) {
        MCreateutc = other.MCreateutc;
      }
      if (other.HasMTid) {
        MTid = other.MTid;
      }
      if (other.HasMPrams) {
        MPrams = other.MPrams;
      }
      if (other.HasMContent) {
        MContent = other.MContent;
      }
      mItems_.Add(other.mItems_);
      if (other.HasMRead) {
        MRead = other.MRead;
      }
      if (other.HasMDraw) {
        MDraw = other.MDraw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt32();
            break;
          }
          case 16: {
            MCreateutc = input.ReadInt32();
            break;
          }
          case 24: {
            MTid = input.ReadInt32();
            break;
          }
          case 34: {
            MPrams = input.ReadString();
            break;
          }
          case 42: {
            MContent = input.ReadString();
            break;
          }
          case 50: {
            mItems_.AddEntriesFrom(input, _repeated_mItems_codec);
            break;
          }
          case 56: {
            MRead = input.ReadBool();
            break;
          }
          case 64: {
            MDraw = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt32();
            break;
          }
          case 16: {
            MCreateutc = input.ReadInt32();
            break;
          }
          case 24: {
            MTid = input.ReadInt32();
            break;
          }
          case 34: {
            MPrams = input.ReadString();
            break;
          }
          case 42: {
            MContent = input.ReadString();
            break;
          }
          case 50: {
            mItems_.AddEntriesFrom(ref input, _repeated_mItems_codec);
            break;
          }
          case 56: {
            MRead = input.ReadBool();
            break;
          }
          case 64: {
            MDraw = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class db_mail : pb::IMessage<db_mail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_mail> _parser = new pb::MessageParser<db_mail>(() => new db_mail());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_mail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_mail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_mail(db_mail other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mMail_ = other.mMail_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_mail Clone() {
      return new db_mail(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_mail" field.</summary>
    public const int MMailFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Pbdb.mail>.Codec _map_mMail_codec
        = new pbc::MapField<int, global::Pbdb.mail>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Pbdb.mail.Parser), 18);
    private readonly pbc::MapField<int, global::Pbdb.mail> mMail_ = new pbc::MapField<int, global::Pbdb.mail>();
    /// <summary>
    /// key mail id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Pbdb.mail> MMail {
      get { return mMail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_mail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_mail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (!MMail.Equals(other.MMail)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      hash ^= MMail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mMail_.WriteTo(output, _map_mMail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mMail_.WriteTo(ref output, _map_mMail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      size += mMail_.CalculateSize(_map_mMail_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_mail other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      mMail_.Add(other.mMail_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mMail_.AddEntriesFrom(input, _map_mMail_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mMail_.AddEntriesFrom(ref input, _map_mMail_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ENUM_DB_GUILD,			// 工会数据
  /// </summary>
  public sealed partial class db_guild : pb::IMessage<db_guild>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_guild> _parser = new pb::MessageParser<db_guild>(() => new db_guild());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_guild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_guild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_guild(db_guild other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mGuild_ = other.mGuild_;
      mLeader_ = other.mLeader_;
      mMembers_ = other.mMembers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_guild Clone() {
      return new db_guild(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// 工会id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_guild" field.</summary>
    public const int MGuildFieldNumber = 2;
    private string mGuild_;
    /// <summary>
    /// 工会名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MGuild {
      get { return mGuild_ ?? ""; }
      set {
        mGuild_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_guild" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMGuild {
      get { return mGuild_ != null; }
    }
    /// <summary>Clears the value of the "m_guild" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMGuild() {
      mGuild_ = null;
    }

    /// <summary>Field number for the "m_leader" field.</summary>
    public const int MLeaderFieldNumber = 3;
    private long mLeader_;
    /// <summary>
    /// 工会会长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MLeader {
      get { if ((_hasBits0 & 2) != 0) { return mLeader_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        mLeader_ = value;
      }
    }
    /// <summary>Gets whether the "m_leader" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMLeader {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_leader" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMLeader() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_members" field.</summary>
    public const int MMembersFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_mMembers_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> mMembers_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 工会成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> MMembers {
      get { return mMembers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_guild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_guild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MGuild != other.MGuild) return false;
      if (MLeader != other.MLeader) return false;
      if(!mMembers_.Equals(other.mMembers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMGuild) hash ^= MGuild.GetHashCode();
      if (HasMLeader) hash ^= MLeader.GetHashCode();
      hash ^= mMembers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMGuild) {
        output.WriteRawTag(18);
        output.WriteString(MGuild);
      }
      if (HasMLeader) {
        output.WriteRawTag(24);
        output.WriteInt64(MLeader);
      }
      mMembers_.WriteTo(output, _repeated_mMembers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMGuild) {
        output.WriteRawTag(18);
        output.WriteString(MGuild);
      }
      if (HasMLeader) {
        output.WriteRawTag(24);
        output.WriteInt64(MLeader);
      }
      mMembers_.WriteTo(ref output, _repeated_mMembers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMGuild) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MGuild);
      }
      if (HasMLeader) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MLeader);
      }
      size += mMembers_.CalculateSize(_repeated_mMembers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_guild other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMGuild) {
        MGuild = other.MGuild;
      }
      if (other.HasMLeader) {
        MLeader = other.MLeader;
      }
      mMembers_.Add(other.mMembers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MGuild = input.ReadString();
            break;
          }
          case 24: {
            MLeader = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            mMembers_.AddEntriesFrom(input, _repeated_mMembers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MGuild = input.ReadString();
            break;
          }
          case 24: {
            MLeader = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            mMembers_.AddEntriesFrom(ref input, _repeated_mMembers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ENUM_DB_NOTICE,			// 公告数据
  /// </summary>
  public sealed partial class db_notice : pb::IMessage<db_notice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_notice> _parser = new pb::MessageParser<db_notice>(() => new db_notice());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_notice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_notice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_notice(db_notice other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mNotice_ = other.mNotice_;
      mStarttime_ = other.mStarttime_;
      mFinishtime_ = other.mFinishtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_notice Clone() {
      return new db_notice(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// 公告id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_notice" field.</summary>
    public const int MNoticeFieldNumber = 2;
    private string mNotice_;
    /// <summary>
    /// 内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MNotice {
      get { return mNotice_ ?? ""; }
      set {
        mNotice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_notice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMNotice {
      get { return mNotice_ != null; }
    }
    /// <summary>Clears the value of the "m_notice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMNotice() {
      mNotice_ = null;
    }

    /// <summary>Field number for the "m_starttime" field.</summary>
    public const int MStarttimeFieldNumber = 3;
    private int mStarttime_;
    /// <summary>
    /// 开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MStarttime {
      get { if ((_hasBits0 & 2) != 0) { return mStarttime_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mStarttime_ = value;
      }
    }
    /// <summary>Gets whether the "m_starttime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMStarttime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_starttime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMStarttime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_finishtime" field.</summary>
    public const int MFinishtimeFieldNumber = 4;
    private int mFinishtime_;
    /// <summary>
    /// 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MFinishtime {
      get { if ((_hasBits0 & 4) != 0) { return mFinishtime_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        mFinishtime_ = value;
      }
    }
    /// <summary>Gets whether the "m_finishtime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMFinishtime {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_finishtime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMFinishtime() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_notice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_notice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MNotice != other.MNotice) return false;
      if (MStarttime != other.MStarttime) return false;
      if (MFinishtime != other.MFinishtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMNotice) hash ^= MNotice.GetHashCode();
      if (HasMStarttime) hash ^= MStarttime.GetHashCode();
      if (HasMFinishtime) hash ^= MFinishtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMNotice) {
        output.WriteRawTag(18);
        output.WriteString(MNotice);
      }
      if (HasMStarttime) {
        output.WriteRawTag(24);
        output.WriteInt32(MStarttime);
      }
      if (HasMFinishtime) {
        output.WriteRawTag(32);
        output.WriteInt32(MFinishtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMNotice) {
        output.WriteRawTag(18);
        output.WriteString(MNotice);
      }
      if (HasMStarttime) {
        output.WriteRawTag(24);
        output.WriteInt32(MStarttime);
      }
      if (HasMFinishtime) {
        output.WriteRawTag(32);
        output.WriteInt32(MFinishtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMNotice) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MNotice);
      }
      if (HasMStarttime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MStarttime);
      }
      if (HasMFinishtime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MFinishtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_notice other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMNotice) {
        MNotice = other.MNotice;
      }
      if (other.HasMStarttime) {
        MStarttime = other.MStarttime;
      }
      if (other.HasMFinishtime) {
        MFinishtime = other.MFinishtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MNotice = input.ReadString();
            break;
          }
          case 24: {
            MStarttime = input.ReadInt32();
            break;
          }
          case 32: {
            MFinishtime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            MNotice = input.ReadString();
            break;
          }
          case 24: {
            MStarttime = input.ReadInt32();
            break;
          }
          case 32: {
            MFinishtime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class rankitem : pb::IMessage<rankitem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<rankitem> _parser = new pb::MessageParser<rankitem>(() => new rankitem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rankitem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rankitem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rankitem(rankitem other) : this() {
      _hasBits0 = other._hasBits0;
      mValue_ = other.mValue_;
      mTime_ = other.mTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public rankitem Clone() {
      return new rankitem(this);
    }

    /// <summary>Field number for the "m_value" field.</summary>
    public const int MValueFieldNumber = 1;
    private long mValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MValue {
      get { if ((_hasBits0 & 1) != 0) { return mValue_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mValue_ = value;
      }
    }
    /// <summary>Gets whether the "m_value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMValue() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_time" field.</summary>
    public const int MTimeFieldNumber = 2;
    private int mTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MTime {
      get { if ((_hasBits0 & 2) != 0) { return mTime_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mTime_ = value;
      }
    }
    /// <summary>Gets whether the "m_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMTime() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as rankitem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(rankitem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MValue != other.MValue) return false;
      if (MTime != other.MTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMValue) hash ^= MValue.GetHashCode();
      if (HasMTime) hash ^= MTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMValue) {
        output.WriteRawTag(8);
        output.WriteInt64(MValue);
      }
      if (HasMTime) {
        output.WriteRawTag(16);
        output.WriteInt32(MTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMValue) {
        output.WriteRawTag(8);
        output.WriteInt64(MValue);
      }
      if (HasMTime) {
        output.WriteRawTag(16);
        output.WriteInt32(MTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MValue);
      }
      if (HasMTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(rankitem other) {
      if (other == null) {
        return;
      }
      if (other.HasMValue) {
        MValue = other.MValue;
      }
      if (other.HasMTime) {
        MTime = other.MTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MValue = input.ReadInt64();
            break;
          }
          case 16: {
            MTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MValue = input.ReadInt64();
            break;
          }
          case 16: {
            MTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///ENUM_DB_RANKLIST,		// 排行数据
  /// </summary>
  public sealed partial class db_ranklist : pb::IMessage<db_ranklist>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_ranklist> _parser = new pb::MessageParser<db_ranklist>(() => new db_ranklist());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_ranklist> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_ranklist() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_ranklist(db_ranklist other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mItems_ = other.mItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_ranklist Clone() {
      return new db_ranklist(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// roleid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_items" field.</summary>
    public const int MItemsFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Pbdb.rankitem>.Codec _map_mItems_codec
        = new pbc::MapField<int, global::Pbdb.rankitem>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Pbdb.rankitem.Parser), 18);
    private readonly pbc::MapField<int, global::Pbdb.rankitem> mItems_ = new pbc::MapField<int, global::Pbdb.rankitem>();
    /// <summary>
    /// key:排行榜类型eranklist
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Pbdb.rankitem> MItems {
      get { return mItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_ranklist);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_ranklist other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (!MItems.Equals(other.MItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      hash ^= MItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mItems_.WriteTo(output, _map_mItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mItems_.WriteTo(ref output, _map_mItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      size += mItems_.CalculateSize(_map_mItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_ranklist other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      mItems_.Add(other.mItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mItems_.AddEntriesFrom(input, _map_mItems_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mItems_.AddEntriesFrom(ref input, _map_mItems_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class db_activity : pb::IMessage<db_activity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_activity> _parser = new pb::MessageParser<db_activity>(() => new db_activity());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_activity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_activity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_activity(db_activity other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mBeg_ = other.mBeg_;
      mEnd_ = other.mEnd_;
      mStart_ = other.mStart_;
      mFinish_ = other.mFinish_;
      mCalendarid_ = other.mCalendarid_;
      mDrawcompliance_ = other.mDrawcompliance_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_activity Clone() {
      return new db_activity(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// tab_actiivity 表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_beg" field.</summary>
    public const int MBegFieldNumber = 2;
    private int mBeg_;
    /// <summary>
    /// 活动开启时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MBeg {
      get { if ((_hasBits0 & 2) != 0) { return mBeg_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mBeg_ = value;
      }
    }
    /// <summary>Gets whether the "m_beg" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMBeg {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_beg" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMBeg() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_end" field.</summary>
    public const int MEndFieldNumber = 3;
    private int mEnd_;
    /// <summary>
    /// 活动结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MEnd {
      get { if ((_hasBits0 & 4) != 0) { return mEnd_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        mEnd_ = value;
      }
    }
    /// <summary>Gets whether the "m_end" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMEnd {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_end" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMEnd() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "m_start" field.</summary>
    public const int MStartFieldNumber = 4;
    private bool mStart_;
    /// <summary>
    /// 是否开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MStart {
      get { if ((_hasBits0 & 8) != 0) { return mStart_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        mStart_ = value;
      }
    }
    /// <summary>Gets whether the "m_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMStart {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "m_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMStart() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "m_finish" field.</summary>
    public const int MFinishFieldNumber = 5;
    private bool mFinish_;
    /// <summary>
    /// 是否关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MFinish {
      get { if ((_hasBits0 & 16) != 0) { return mFinish_; } else { return false; } }
      set {
        _hasBits0 |= 16;
        mFinish_ = value;
      }
    }
    /// <summary>Gets whether the "m_finish" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMFinish {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "m_finish" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMFinish() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "m_calendarid" field.</summary>
    public const int MCalendaridFieldNumber = 6;
    private int mCalendarid_;
    /// <summary>
    /// >0:脚本日历控制 &lt;0:activity自行控制开关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCalendarid {
      get { if ((_hasBits0 & 32) != 0) { return mCalendarid_; } else { return 0; } }
      set {
        _hasBits0 |= 32;
        mCalendarid_ = value;
      }
    }
    /// <summary>Gets whether the "m_calendarid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMCalendarid {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "m_calendarid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMCalendarid() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "m_drawcompliance" field.</summary>
    public const int MDrawcomplianceFieldNumber = 7;
    private static readonly pbc::MapField<long, global::Pbdb.db_activity.Types.drawcompliance>.Codec _map_mDrawcompliance_codec
        = new pbc::MapField<long, global::Pbdb.db_activity.Types.drawcompliance>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForMessage(18, global::Pbdb.db_activity.Types.drawcompliance.Parser), 58);
    private readonly pbc::MapField<long, global::Pbdb.db_activity.Types.drawcompliance> mDrawcompliance_ = new pbc::MapField<long, global::Pbdb.db_activity.Types.drawcompliance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Pbdb.db_activity.Types.drawcompliance> MDrawcompliance {
      get { return mDrawcompliance_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_activity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_activity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MBeg != other.MBeg) return false;
      if (MEnd != other.MEnd) return false;
      if (MStart != other.MStart) return false;
      if (MFinish != other.MFinish) return false;
      if (MCalendarid != other.MCalendarid) return false;
      if (!MDrawcompliance.Equals(other.MDrawcompliance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMBeg) hash ^= MBeg.GetHashCode();
      if (HasMEnd) hash ^= MEnd.GetHashCode();
      if (HasMStart) hash ^= MStart.GetHashCode();
      if (HasMFinish) hash ^= MFinish.GetHashCode();
      if (HasMCalendarid) hash ^= MCalendarid.GetHashCode();
      hash ^= MDrawcompliance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMBeg) {
        output.WriteRawTag(16);
        output.WriteInt32(MBeg);
      }
      if (HasMEnd) {
        output.WriteRawTag(24);
        output.WriteInt32(MEnd);
      }
      if (HasMStart) {
        output.WriteRawTag(32);
        output.WriteBool(MStart);
      }
      if (HasMFinish) {
        output.WriteRawTag(40);
        output.WriteBool(MFinish);
      }
      if (HasMCalendarid) {
        output.WriteRawTag(48);
        output.WriteInt32(MCalendarid);
      }
      mDrawcompliance_.WriteTo(output, _map_mDrawcompliance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMBeg) {
        output.WriteRawTag(16);
        output.WriteInt32(MBeg);
      }
      if (HasMEnd) {
        output.WriteRawTag(24);
        output.WriteInt32(MEnd);
      }
      if (HasMStart) {
        output.WriteRawTag(32);
        output.WriteBool(MStart);
      }
      if (HasMFinish) {
        output.WriteRawTag(40);
        output.WriteBool(MFinish);
      }
      if (HasMCalendarid) {
        output.WriteRawTag(48);
        output.WriteInt32(MCalendarid);
      }
      mDrawcompliance_.WriteTo(ref output, _map_mDrawcompliance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMBeg) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MBeg);
      }
      if (HasMEnd) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MEnd);
      }
      if (HasMStart) {
        size += 1 + 1;
      }
      if (HasMFinish) {
        size += 1 + 1;
      }
      if (HasMCalendarid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCalendarid);
      }
      size += mDrawcompliance_.CalculateSize(_map_mDrawcompliance_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_activity other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMBeg) {
        MBeg = other.MBeg;
      }
      if (other.HasMEnd) {
        MEnd = other.MEnd;
      }
      if (other.HasMStart) {
        MStart = other.MStart;
      }
      if (other.HasMFinish) {
        MFinish = other.MFinish;
      }
      if (other.HasMCalendarid) {
        MCalendarid = other.MCalendarid;
      }
      mDrawcompliance_.Add(other.mDrawcompliance_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MBeg = input.ReadInt32();
            break;
          }
          case 24: {
            MEnd = input.ReadInt32();
            break;
          }
          case 32: {
            MStart = input.ReadBool();
            break;
          }
          case 40: {
            MFinish = input.ReadBool();
            break;
          }
          case 48: {
            MCalendarid = input.ReadInt32();
            break;
          }
          case 58: {
            mDrawcompliance_.AddEntriesFrom(input, _map_mDrawcompliance_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MBeg = input.ReadInt32();
            break;
          }
          case 24: {
            MEnd = input.ReadInt32();
            break;
          }
          case 32: {
            MStart = input.ReadBool();
            break;
          }
          case 40: {
            MFinish = input.ReadBool();
            break;
          }
          case 48: {
            MCalendarid = input.ReadInt32();
            break;
          }
          case 58: {
            mDrawcompliance_.AddEntriesFrom(ref input, _map_mDrawcompliance_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the db_activity message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// tab_activity.m_type == EActivityDrawCompliance
      /// </summary>
      public sealed partial class drawcompliance : pb::IMessage<drawcompliance>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<drawcompliance> _parser = new pb::MessageParser<drawcompliance>(() => new drawcompliance());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<drawcompliance> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pbdb.db_activity.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public drawcompliance() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public drawcompliance(drawcompliance other) : this() {
          _hasBits0 = other._hasBits0;
          mCount_ = other.mCount_;
          mReward_ = other.mReward_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public drawcompliance Clone() {
          return new drawcompliance(this);
        }

        /// <summary>Field number for the "m_count" field.</summary>
        public const int MCountFieldNumber = 1;
        private int mCount_;
        /// <summary>
        /// 累计次数
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MCount {
          get { if ((_hasBits0 & 1) != 0) { return mCount_; } else { return 0; } }
          set {
            _hasBits0 |= 1;
            mCount_ = value;
          }
        }
        /// <summary>Gets whether the "m_count" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMCount {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "m_count" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMCount() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "m_reward" field.</summary>
        public const int MRewardFieldNumber = 2;
        private static readonly pbc::MapField<int, bool>.Codec _map_mReward_codec
            = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForBool(16, false), 18);
        private readonly pbc::MapField<int, bool> mReward_ = new pbc::MapField<int, bool>();
        /// <summary>
        /// 累计领取哪些奖励
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<int, bool> MReward {
          get { return mReward_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as drawcompliance);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(drawcompliance other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MCount != other.MCount) return false;
          if (!MReward.Equals(other.MReward)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMCount) hash ^= MCount.GetHashCode();
          hash ^= MReward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMCount) {
            output.WriteRawTag(8);
            output.WriteInt32(MCount);
          }
          mReward_.WriteTo(output, _map_mReward_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMCount) {
            output.WriteRawTag(8);
            output.WriteInt32(MCount);
          }
          mReward_.WriteTo(ref output, _map_mReward_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMCount) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCount);
          }
          size += mReward_.CalculateSize(_map_mReward_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(drawcompliance other) {
          if (other == null) {
            return;
          }
          if (other.HasMCount) {
            MCount = other.MCount;
          }
          mReward_.Add(other.mReward_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MCount = input.ReadInt32();
                break;
              }
              case 18: {
                mReward_.AddEntriesFrom(input, _map_mReward_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MCount = input.ReadInt32();
                break;
              }
              case 18: {
                mReward_.AddEntriesFrom(ref input, _map_mReward_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class db_task : pb::IMessage<db_task>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_task> _parser = new pb::MessageParser<db_task>(() => new db_task());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_task(db_task other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mRundatas_ = other.mRundatas_.Clone();
      mCompleteddatas_ = other.mCompleteddatas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_task Clone() {
      return new db_task(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// roleid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_rundatas" field.</summary>
    public const int MRundatasFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Pbdb.db_task.Types.data>.Codec _map_mRundatas_codec
        = new pbc::MapField<int, global::Pbdb.db_task.Types.data>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Pbdb.db_task.Types.data.Parser), 18);
    private readonly pbc::MapField<int, global::Pbdb.db_task.Types.data> mRundatas_ = new pbc::MapField<int, global::Pbdb.db_task.Types.data>();
    /// <summary>
    /// 正在进行的任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Pbdb.db_task.Types.data> MRundatas {
      get { return mRundatas_; }
    }

    /// <summary>Field number for the "m_completeddatas" field.</summary>
    public const int MCompleteddatasFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Pbdb.db_task.Types.data>.Codec _map_mCompleteddatas_codec
        = new pbc::MapField<int, global::Pbdb.db_task.Types.data>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Pbdb.db_task.Types.data.Parser), 26);
    private readonly pbc::MapField<int, global::Pbdb.db_task.Types.data> mCompleteddatas_ = new pbc::MapField<int, global::Pbdb.db_task.Types.data>();
    /// <summary>
    /// 已完成的任务数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Pbdb.db_task.Types.data> MCompleteddatas {
      get { return mCompleteddatas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (!MRundatas.Equals(other.MRundatas)) return false;
      if (!MCompleteddatas.Equals(other.MCompleteddatas)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      hash ^= MRundatas.GetHashCode();
      hash ^= MCompleteddatas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mRundatas_.WriteTo(output, _map_mRundatas_codec);
      mCompleteddatas_.WriteTo(output, _map_mCompleteddatas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      mRundatas_.WriteTo(ref output, _map_mRundatas_codec);
      mCompleteddatas_.WriteTo(ref output, _map_mCompleteddatas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      size += mRundatas_.CalculateSize(_map_mRundatas_codec);
      size += mCompleteddatas_.CalculateSize(_map_mCompleteddatas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_task other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      mRundatas_.Add(other.mRundatas_);
      mCompleteddatas_.Add(other.mCompleteddatas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mRundatas_.AddEntriesFrom(input, _map_mRundatas_codec);
            break;
          }
          case 26: {
            mCompleteddatas_.AddEntriesFrom(input, _map_mCompleteddatas_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 18: {
            mRundatas_.AddEntriesFrom(ref input, _map_mRundatas_codec);
            break;
          }
          case 26: {
            mCompleteddatas_.AddEntriesFrom(ref input, _map_mCompleteddatas_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the db_task message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class data_schedule : pb::IMessage<data_schedule>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<data_schedule> _parser = new pb::MessageParser<data_schedule>(() => new data_schedule());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<data_schedule> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pbdb.db_task.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public data_schedule() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public data_schedule(data_schedule other) : this() {
          _hasBits0 = other._hasBits0;
          mType_ = other.mType_;
          mValue_ = other.mValue_;
          mSumint_ = other.mSumint_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public data_schedule Clone() {
          return new data_schedule(this);
        }

        /// <summary>Field number for the "m_type" field.</summary>
        public const int MTypeFieldNumber = 1;
        private int mType_;
        /// <summary>
        /// csvtable.ETask
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MType {
          get { if ((_hasBits0 & 1) != 0) { return mType_; } else { return 0; } }
          set {
            _hasBits0 |= 1;
            mType_ = value;
          }
        }
        /// <summary>Gets whether the "m_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "m_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "m_value" field.</summary>
        public const int MValueFieldNumber = 2;
        private int mValue_;
        /// <summary>
        /// 当前值 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MValue {
          get { if ((_hasBits0 & 2) != 0) { return mValue_; } else { return 0; } }
          set {
            _hasBits0 |= 2;
            mValue_ = value;
          }
        }
        /// <summary>Gets whether the "m_value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMValue {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "m_value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMValue() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "m_sumint" field.</summary>
        public const int MSumintFieldNumber = 3;
        private int mSumint_;
        /// <summary>
        /// 总值
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MSumint {
          get { if ((_hasBits0 & 4) != 0) { return mSumint_; } else { return 0; } }
          set {
            _hasBits0 |= 4;
            mSumint_ = value;
          }
        }
        /// <summary>Gets whether the "m_sumint" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMSumint {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "m_sumint" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMSumint() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as data_schedule);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(data_schedule other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MType != other.MType) return false;
          if (MValue != other.MValue) return false;
          if (MSumint != other.MSumint) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMType) hash ^= MType.GetHashCode();
          if (HasMValue) hash ^= MValue.GetHashCode();
          if (HasMSumint) hash ^= MSumint.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMType) {
            output.WriteRawTag(8);
            output.WriteInt32(MType);
          }
          if (HasMValue) {
            output.WriteRawTag(16);
            output.WriteInt32(MValue);
          }
          if (HasMSumint) {
            output.WriteRawTag(24);
            output.WriteInt32(MSumint);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMType) {
            output.WriteRawTag(8);
            output.WriteInt32(MType);
          }
          if (HasMValue) {
            output.WriteRawTag(16);
            output.WriteInt32(MValue);
          }
          if (HasMSumint) {
            output.WriteRawTag(24);
            output.WriteInt32(MSumint);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMType) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MType);
          }
          if (HasMValue) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MValue);
          }
          if (HasMSumint) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MSumint);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(data_schedule other) {
          if (other == null) {
            return;
          }
          if (other.HasMType) {
            MType = other.MType;
          }
          if (other.HasMValue) {
            MValue = other.MValue;
          }
          if (other.HasMSumint) {
            MSumint = other.MSumint;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MType = input.ReadInt32();
                break;
              }
              case 16: {
                MValue = input.ReadInt32();
                break;
              }
              case 24: {
                MSumint = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MType = input.ReadInt32();
                break;
              }
              case 16: {
                MValue = input.ReadInt32();
                break;
              }
              case 24: {
                MSumint = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class data : pb::IMessage<data>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<data> _parser = new pb::MessageParser<data>(() => new data());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<data> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pbdb.db_task.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public data() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public data(data other) : this() {
          _hasBits0 = other._hasBits0;
          mTaskid_ = other.mTaskid_;
          mReceiveutc_ = other.mReceiveutc_;
          mFinshutc_ = other.mFinshutc_;
          mSchedules_ = other.mSchedules_.Clone();
          mReceive_ = other.mReceive_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public data Clone() {
          return new data(this);
        }

        /// <summary>Field number for the "m_taskid" field.</summary>
        public const int MTaskidFieldNumber = 1;
        private int mTaskid_;
        /// <summary>
        /// 任务id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MTaskid {
          get { if ((_hasBits0 & 1) != 0) { return mTaskid_; } else { return 0; } }
          set {
            _hasBits0 |= 1;
            mTaskid_ = value;
          }
        }
        /// <summary>Gets whether the "m_taskid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMTaskid {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "m_taskid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMTaskid() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "m_receiveutc" field.</summary>
        public const int MReceiveutcFieldNumber = 2;
        private int mReceiveutc_;
        /// <summary>
        /// 接收任务时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MReceiveutc {
          get { if ((_hasBits0 & 2) != 0) { return mReceiveutc_; } else { return 0; } }
          set {
            _hasBits0 |= 2;
            mReceiveutc_ = value;
          }
        }
        /// <summary>Gets whether the "m_receiveutc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMReceiveutc {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "m_receiveutc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMReceiveutc() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "m_finshutc" field.</summary>
        public const int MFinshutcFieldNumber = 3;
        private int mFinshutc_;
        /// <summary>
        /// 完成任务时间
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MFinshutc {
          get { if ((_hasBits0 & 4) != 0) { return mFinshutc_; } else { return 0; } }
          set {
            _hasBits0 |= 4;
            mFinshutc_ = value;
          }
        }
        /// <summary>Gets whether the "m_finshutc" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMFinshutc {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "m_finshutc" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMFinshutc() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "m_schedules" field.</summary>
        public const int MSchedulesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Pbdb.db_task.Types.data_schedule> _repeated_mSchedules_codec
            = pb::FieldCodec.ForMessage(34, global::Pbdb.db_task.Types.data_schedule.Parser);
        private readonly pbc::RepeatedField<global::Pbdb.db_task.Types.data_schedule> mSchedules_ = new pbc::RepeatedField<global::Pbdb.db_task.Types.data_schedule>();
        /// <summary>
        /// 任务进度
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Pbdb.db_task.Types.data_schedule> MSchedules {
          get { return mSchedules_; }
        }

        /// <summary>Field number for the "m_receive" field.</summary>
        public const int MReceiveFieldNumber = 5;
        private bool mReceive_;
        /// <summary>
        /// 任务奖励是否已领取
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MReceive {
          get { if ((_hasBits0 & 8) != 0) { return mReceive_; } else { return false; } }
          set {
            _hasBits0 |= 8;
            mReceive_ = value;
          }
        }
        /// <summary>Gets whether the "m_receive" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMReceive {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "m_receive" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMReceive() {
          _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as data);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(data other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MTaskid != other.MTaskid) return false;
          if (MReceiveutc != other.MReceiveutc) return false;
          if (MFinshutc != other.MFinshutc) return false;
          if(!mSchedules_.Equals(other.mSchedules_)) return false;
          if (MReceive != other.MReceive) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMTaskid) hash ^= MTaskid.GetHashCode();
          if (HasMReceiveutc) hash ^= MReceiveutc.GetHashCode();
          if (HasMFinshutc) hash ^= MFinshutc.GetHashCode();
          hash ^= mSchedules_.GetHashCode();
          if (HasMReceive) hash ^= MReceive.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMTaskid) {
            output.WriteRawTag(8);
            output.WriteInt32(MTaskid);
          }
          if (HasMReceiveutc) {
            output.WriteRawTag(16);
            output.WriteInt32(MReceiveutc);
          }
          if (HasMFinshutc) {
            output.WriteRawTag(24);
            output.WriteInt32(MFinshutc);
          }
          mSchedules_.WriteTo(output, _repeated_mSchedules_codec);
          if (HasMReceive) {
            output.WriteRawTag(40);
            output.WriteBool(MReceive);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMTaskid) {
            output.WriteRawTag(8);
            output.WriteInt32(MTaskid);
          }
          if (HasMReceiveutc) {
            output.WriteRawTag(16);
            output.WriteInt32(MReceiveutc);
          }
          if (HasMFinshutc) {
            output.WriteRawTag(24);
            output.WriteInt32(MFinshutc);
          }
          mSchedules_.WriteTo(ref output, _repeated_mSchedules_codec);
          if (HasMReceive) {
            output.WriteRawTag(40);
            output.WriteBool(MReceive);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasMTaskid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTaskid);
          }
          if (HasMReceiveutc) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MReceiveutc);
          }
          if (HasMFinshutc) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MFinshutc);
          }
          size += mSchedules_.CalculateSize(_repeated_mSchedules_codec);
          if (HasMReceive) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(data other) {
          if (other == null) {
            return;
          }
          if (other.HasMTaskid) {
            MTaskid = other.MTaskid;
          }
          if (other.HasMReceiveutc) {
            MReceiveutc = other.MReceiveutc;
          }
          if (other.HasMFinshutc) {
            MFinshutc = other.MFinshutc;
          }
          mSchedules_.Add(other.mSchedules_);
          if (other.HasMReceive) {
            MReceive = other.MReceive;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MTaskid = input.ReadInt32();
                break;
              }
              case 16: {
                MReceiveutc = input.ReadInt32();
                break;
              }
              case 24: {
                MFinshutc = input.ReadInt32();
                break;
              }
              case 34: {
                mSchedules_.AddEntriesFrom(input, _repeated_mSchedules_codec);
                break;
              }
              case 40: {
                MReceive = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                MTaskid = input.ReadInt32();
                break;
              }
              case 16: {
                MReceiveutc = input.ReadInt32();
                break;
              }
              case 24: {
                MFinshutc = input.ReadInt32();
                break;
              }
              case 34: {
                mSchedules_.AddEntriesFrom(ref input, _repeated_mSchedules_codec);
                break;
              }
              case 40: {
                MReceive = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class db_calendar : pb::IMessage<db_calendar>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_calendar> _parser = new pb::MessageParser<db_calendar>(() => new db_calendar());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_calendar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_calendar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_calendar(db_calendar other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mTime_ = other.mTime_;
      mStart_ = other.mStart_;
      mFinish_ = other.mFinish_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_calendar Clone() {
      return new db_calendar(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// 脚本日历id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_time" field.</summary>
    public const int MTimeFieldNumber = 2;
    private long mTime_;
    /// <summary>
    /// 32bit 开始时间 32 结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MTime {
      get { if ((_hasBits0 & 2) != 0) { return mTime_; } else { return 0L; } }
      set {
        _hasBits0 |= 2;
        mTime_ = value;
      }
    }
    /// <summary>Gets whether the "m_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMTime {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMTime() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_start" field.</summary>
    public const int MStartFieldNumber = 3;
    private bool mStart_;
    /// <summary>
    /// 是否开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MStart {
      get { if ((_hasBits0 & 4) != 0) { return mStart_; } else { return false; } }
      set {
        _hasBits0 |= 4;
        mStart_ = value;
      }
    }
    /// <summary>Gets whether the "m_start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMStart {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMStart() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "m_finish" field.</summary>
    public const int MFinishFieldNumber = 4;
    private bool mFinish_;
    /// <summary>
    /// 是否结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MFinish {
      get { if ((_hasBits0 & 8) != 0) { return mFinish_; } else { return false; } }
      set {
        _hasBits0 |= 8;
        mFinish_ = value;
      }
    }
    /// <summary>Gets whether the "m_finish" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMFinish {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "m_finish" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMFinish() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_calendar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_calendar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MTime != other.MTime) return false;
      if (MStart != other.MStart) return false;
      if (MFinish != other.MFinish) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMTime) hash ^= MTime.GetHashCode();
      if (HasMStart) hash ^= MStart.GetHashCode();
      if (HasMFinish) hash ^= MFinish.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMTime) {
        output.WriteRawTag(16);
        output.WriteInt64(MTime);
      }
      if (HasMStart) {
        output.WriteRawTag(24);
        output.WriteBool(MStart);
      }
      if (HasMFinish) {
        output.WriteRawTag(32);
        output.WriteBool(MFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMTime) {
        output.WriteRawTag(16);
        output.WriteInt64(MTime);
      }
      if (HasMStart) {
        output.WriteRawTag(24);
        output.WriteBool(MStart);
      }
      if (HasMFinish) {
        output.WriteRawTag(32);
        output.WriteBool(MFinish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MTime);
      }
      if (HasMStart) {
        size += 1 + 1;
      }
      if (HasMFinish) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_calendar other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMTime) {
        MTime = other.MTime;
      }
      if (other.HasMStart) {
        MStart = other.MStart;
      }
      if (other.HasMFinish) {
        MFinish = other.MFinish;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MTime = input.ReadInt64();
            break;
          }
          case 24: {
            MStart = input.ReadBool();
            break;
          }
          case 32: {
            MFinish = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MTime = input.ReadInt64();
            break;
          }
          case 24: {
            MStart = input.ReadBool();
            break;
          }
          case 32: {
            MFinish = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class familyer : pb::IMessage<familyer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<familyer> _parser = new pb::MessageParser<familyer>(() => new familyer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<familyer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public familyer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public familyer(familyer other) : this() {
      _hasBits0 = other._hasBits0;
      mRoleid_ = other.mRoleid_;
      mJoinutc_ = other.mJoinutc_;
      mLastsignutc_ = other.mLastsignutc_;
      mPosition_ = other.mPosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public familyer Clone() {
      return new familyer(this);
    }

    /// <summary>Field number for the "m_roleid" field.</summary>
    public const int MRoleidFieldNumber = 1;
    private long mRoleid_;
    /// <summary>
    /// 军团成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MRoleid {
      get { if ((_hasBits0 & 1) != 0) { return mRoleid_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mRoleid_ = value;
      }
    }
    /// <summary>Gets whether the "m_roleid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMRoleid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_roleid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMRoleid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_joinutc" field.</summary>
    public const int MJoinutcFieldNumber = 2;
    private int mJoinutc_;
    /// <summary>
    /// 加入军团的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MJoinutc {
      get { if ((_hasBits0 & 2) != 0) { return mJoinutc_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mJoinutc_ = value;
      }
    }
    /// <summary>Gets whether the "m_joinutc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMJoinutc {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_joinutc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMJoinutc() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_lastsignutc" field.</summary>
    public const int MLastsignutcFieldNumber = 3;
    private int mLastsignutc_;
    /// <summary>
    /// 上次签到时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MLastsignutc {
      get { if ((_hasBits0 & 4) != 0) { return mLastsignutc_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        mLastsignutc_ = value;
      }
    }
    /// <summary>Gets whether the "m_lastsignutc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMLastsignutc {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_lastsignutc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMLastsignutc() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "m_position" field.</summary>
    public const int MPositionFieldNumber = 4;
    private global::Pbdb.familyer.Types.eposition mPosition_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pbdb.familyer.Types.eposition MPosition {
      get { if ((_hasBits0 & 8) != 0) { return mPosition_; } else { return global::Pbdb.familyer.Types.eposition.Leader; } }
      set {
        _hasBits0 |= 8;
        mPosition_ = value;
      }
    }
    /// <summary>Gets whether the "m_position" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMPosition {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "m_position" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMPosition() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as familyer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(familyer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MRoleid != other.MRoleid) return false;
      if (MJoinutc != other.MJoinutc) return false;
      if (MLastsignutc != other.MLastsignutc) return false;
      if (MPosition != other.MPosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMRoleid) hash ^= MRoleid.GetHashCode();
      if (HasMJoinutc) hash ^= MJoinutc.GetHashCode();
      if (HasMLastsignutc) hash ^= MLastsignutc.GetHashCode();
      if (HasMPosition) hash ^= MPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMRoleid) {
        output.WriteRawTag(8);
        output.WriteInt64(MRoleid);
      }
      if (HasMJoinutc) {
        output.WriteRawTag(16);
        output.WriteInt32(MJoinutc);
      }
      if (HasMLastsignutc) {
        output.WriteRawTag(24);
        output.WriteInt32(MLastsignutc);
      }
      if (HasMPosition) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMRoleid) {
        output.WriteRawTag(8);
        output.WriteInt64(MRoleid);
      }
      if (HasMJoinutc) {
        output.WriteRawTag(16);
        output.WriteInt32(MJoinutc);
      }
      if (HasMLastsignutc) {
        output.WriteRawTag(24);
        output.WriteInt32(MLastsignutc);
      }
      if (HasMPosition) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMRoleid) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MRoleid);
      }
      if (HasMJoinutc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MJoinutc);
      }
      if (HasMLastsignutc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MLastsignutc);
      }
      if (HasMPosition) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(familyer other) {
      if (other == null) {
        return;
      }
      if (other.HasMRoleid) {
        MRoleid = other.MRoleid;
      }
      if (other.HasMJoinutc) {
        MJoinutc = other.MJoinutc;
      }
      if (other.HasMLastsignutc) {
        MLastsignutc = other.MLastsignutc;
      }
      if (other.HasMPosition) {
        MPosition = other.MPosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MRoleid = input.ReadInt64();
            break;
          }
          case 16: {
            MJoinutc = input.ReadInt32();
            break;
          }
          case 24: {
            MLastsignutc = input.ReadInt32();
            break;
          }
          case 32: {
            MPosition = (global::Pbdb.familyer.Types.eposition) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MRoleid = input.ReadInt64();
            break;
          }
          case 16: {
            MJoinutc = input.ReadInt32();
            break;
          }
          case 24: {
            MLastsignutc = input.ReadInt32();
            break;
          }
          case 32: {
            MPosition = (global::Pbdb.familyer.Types.eposition) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the familyer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// 职位
      /// </summary>
      public enum eposition {
        /// <summary>
        /// 军团长
        /// </summary>
        [pbr::OriginalName("leader")] Leader = 0,
        /// <summary>
        /// 军师
        /// </summary>
        [pbr::OriginalName("counsellor")] Counsellor = 1,
        /// <summary>
        /// 普通成员
        /// </summary>
        [pbr::OriginalName("ordinary")] Ordinary = 2,
      }

    }
    #endregion

  }

  public sealed partial class db_family : pb::IMessage<db_family>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<db_family> _parser = new pb::MessageParser<db_family>(() => new db_family());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<db_family> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pbdb.DbReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_family() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_family(db_family other) : this() {
      _hasBits0 = other._hasBits0;
      mId_ = other.mId_;
      mCreateutc_ = other.mCreateutc_;
      mName_ = other.mName_;
      mLeader_ = other.mLeader_;
      mLv_ = other.mLv_;
      mExp_ = other.mExp_;
      mMember_ = other.mMember_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public db_family Clone() {
      return new db_family(this);
    }

    /// <summary>Field number for the "m_id" field.</summary>
    public const int MIdFieldNumber = 1;
    private long mId_;
    /// <summary>
    /// 军团id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MId {
      get { if ((_hasBits0 & 1) != 0) { return mId_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        mId_ = value;
      }
    }
    /// <summary>Gets whether the "m_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "m_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "m_createutc" field.</summary>
    public const int MCreateutcFieldNumber = 2;
    private int mCreateutc_;
    /// <summary>
    /// 军团创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MCreateutc {
      get { if ((_hasBits0 & 2) != 0) { return mCreateutc_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        mCreateutc_ = value;
      }
    }
    /// <summary>Gets whether the "m_createutc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMCreateutc {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "m_createutc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMCreateutc() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "m_name" field.</summary>
    public const int MNameFieldNumber = 3;
    private string mName_;
    /// <summary>
    /// 军团名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MName {
      get { return mName_ ?? ""; }
      set {
        mName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "m_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMName {
      get { return mName_ != null; }
    }
    /// <summary>Clears the value of the "m_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMName() {
      mName_ = null;
    }

    /// <summary>Field number for the "m_leader" field.</summary>
    public const int MLeaderFieldNumber = 4;
    private long mLeader_;
    /// <summary>
    /// 军团长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MLeader {
      get { if ((_hasBits0 & 4) != 0) { return mLeader_; } else { return 0L; } }
      set {
        _hasBits0 |= 4;
        mLeader_ = value;
      }
    }
    /// <summary>Gets whether the "m_leader" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMLeader {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "m_leader" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMLeader() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "m_lv" field.</summary>
    public const int MLvFieldNumber = 5;
    private int mLv_;
    /// <summary>
    /// 军团等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MLv {
      get { if ((_hasBits0 & 8) != 0) { return mLv_; } else { return 0; } }
      set {
        _hasBits0 |= 8;
        mLv_ = value;
      }
    }
    /// <summary>Gets whether the "m_lv" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMLv {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "m_lv" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMLv() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "m_exp" field.</summary>
    public const int MExpFieldNumber = 6;
    private int mExp_;
    /// <summary>
    /// 军团经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MExp {
      get { if ((_hasBits0 & 16) != 0) { return mExp_; } else { return 0; } }
      set {
        _hasBits0 |= 16;
        mExp_ = value;
      }
    }
    /// <summary>Gets whether the "m_exp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMExp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "m_exp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMExp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "m_member" field.</summary>
    public const int MMemberFieldNumber = 7;
    private static readonly pbc::MapField<long, global::Pbdb.familyer>.Codec _map_mMember_codec
        = new pbc::MapField<long, global::Pbdb.familyer>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForMessage(18, global::Pbdb.familyer.Parser), 58);
    private readonly pbc::MapField<long, global::Pbdb.familyer> mMember_ = new pbc::MapField<long, global::Pbdb.familyer>();
    /// <summary>
    /// 成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Pbdb.familyer> MMember {
      get { return mMember_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as db_family);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(db_family other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MId != other.MId) return false;
      if (MCreateutc != other.MCreateutc) return false;
      if (MName != other.MName) return false;
      if (MLeader != other.MLeader) return false;
      if (MLv != other.MLv) return false;
      if (MExp != other.MExp) return false;
      if (!MMember.Equals(other.MMember)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMId) hash ^= MId.GetHashCode();
      if (HasMCreateutc) hash ^= MCreateutc.GetHashCode();
      if (HasMName) hash ^= MName.GetHashCode();
      if (HasMLeader) hash ^= MLeader.GetHashCode();
      if (HasMLv) hash ^= MLv.GetHashCode();
      if (HasMExp) hash ^= MExp.GetHashCode();
      hash ^= MMember.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMCreateutc) {
        output.WriteRawTag(16);
        output.WriteInt32(MCreateutc);
      }
      if (HasMName) {
        output.WriteRawTag(26);
        output.WriteString(MName);
      }
      if (HasMLeader) {
        output.WriteRawTag(32);
        output.WriteInt64(MLeader);
      }
      if (HasMLv) {
        output.WriteRawTag(40);
        output.WriteInt32(MLv);
      }
      if (HasMExp) {
        output.WriteRawTag(48);
        output.WriteInt32(MExp);
      }
      mMember_.WriteTo(output, _map_mMember_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMId) {
        output.WriteRawTag(8);
        output.WriteInt64(MId);
      }
      if (HasMCreateutc) {
        output.WriteRawTag(16);
        output.WriteInt32(MCreateutc);
      }
      if (HasMName) {
        output.WriteRawTag(26);
        output.WriteString(MName);
      }
      if (HasMLeader) {
        output.WriteRawTag(32);
        output.WriteInt64(MLeader);
      }
      if (HasMLv) {
        output.WriteRawTag(40);
        output.WriteInt32(MLv);
      }
      if (HasMExp) {
        output.WriteRawTag(48);
        output.WriteInt32(MExp);
      }
      mMember_.WriteTo(ref output, _map_mMember_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MId);
      }
      if (HasMCreateutc) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MCreateutc);
      }
      if (HasMName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MName);
      }
      if (HasMLeader) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MLeader);
      }
      if (HasMLv) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MLv);
      }
      if (HasMExp) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MExp);
      }
      size += mMember_.CalculateSize(_map_mMember_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(db_family other) {
      if (other == null) {
        return;
      }
      if (other.HasMId) {
        MId = other.MId;
      }
      if (other.HasMCreateutc) {
        MCreateutc = other.MCreateutc;
      }
      if (other.HasMName) {
        MName = other.MName;
      }
      if (other.HasMLeader) {
        MLeader = other.MLeader;
      }
      if (other.HasMLv) {
        MLv = other.MLv;
      }
      if (other.HasMExp) {
        MExp = other.MExp;
      }
      mMember_.Add(other.mMember_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MCreateutc = input.ReadInt32();
            break;
          }
          case 26: {
            MName = input.ReadString();
            break;
          }
          case 32: {
            MLeader = input.ReadInt64();
            break;
          }
          case 40: {
            MLv = input.ReadInt32();
            break;
          }
          case 48: {
            MExp = input.ReadInt32();
            break;
          }
          case 58: {
            mMember_.AddEntriesFrom(input, _map_mMember_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MId = input.ReadInt64();
            break;
          }
          case 16: {
            MCreateutc = input.ReadInt32();
            break;
          }
          case 26: {
            MName = input.ReadString();
            break;
          }
          case 32: {
            MLeader = input.ReadInt64();
            break;
          }
          case 40: {
            MLv = input.ReadInt32();
            break;
          }
          case 48: {
            MExp = input.ReadInt32();
            break;
          }
          case 58: {
            mMember_.AddEntriesFrom(ref input, _map_mMember_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
